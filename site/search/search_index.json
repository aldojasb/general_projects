{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to My Software &amp; Data Science Portfolio","text":"<p>This portfolio highlights my expertise in software architecture, data science, DevOps, workflows, and applied projects. It serves as a structured documentation of best practices, key principles, and hands-on experience in building scalable, maintainable, and efficient software systems.</p>"},{"location":"#what-you-will-find-here","title":"What You Will Find Here","text":"<ul> <li>Software Architecture: Principles and patterns for designing flexible, scalable, and maintainable systems, including SOLID principles and Clean Architecture concepts. </li> <li>Data Science &amp; AI: Key concepts and learning projects in Artificial Intelligence and Machine Learning, covering topics like autoencoders, reinforcement learning, computer vision, and more. </li> <li>Development &amp; DevOps: Best practices in pytest for testing, Dev Containers for stable environments, CI/CD integration, and more. </li> <li>Workflows: Approaches for prioritizing development, agile methodologies, and efficient software delivery. </li> <li>Projects: A showcase of real-world applications that reinforce these concepts through hands-on implementation.</li> </ul>"},{"location":"#purpose-of-this-portfolio","title":"Purpose of This Portfolio","text":"<p>This portfolio serves both as a learning resource and a technical showcase for developers, mentees, recruiters, and potential clients. Whether you're exploring software design patterns, improving your testing skills, or diving into AI/ML concepts, you\u2019ll find structured content designed to facilitate learning and best practices.</p>"},{"location":"#connect-with-me","title":"Connect With Me","text":"<p>Feel free to reach out for discussions, collaborations, or networking. </p> <ul> <li>LinkedIn: Aldo Saltao Barros </li> <li>GitHub: aldojasb - General Projects Repository</li> </ul>"},{"location":"guides/data_science_and_ai/overview/","title":"Overview","text":""},{"location":"guides/data_science_and_ai/overview/#tbd","title":"TBD","text":"<p>Key concepts and learning projects in Artificial Intelligence and Machine Learning, covering topics like autoencoders, reinforcement learning, computer vision, and more.</p>"},{"location":"guides/development_and_devops/mkdocs_tutorial/","title":"MkDocs: Installing, Configuring, and Automating it with GitHub Pages","text":"<p>This tutorial provides a step-by-step walkthrough to install, configure, and deploy MkDocs manually and set up an automated deployment pipeline using GitHub Actions.</p>"},{"location":"guides/development_and_devops/mkdocs_tutorial/#step-1-install-mkdocs-with-poetry","title":"Step 1: Install MkDocs with Poetry","text":"<p>I use Poetry as a package manager to keep dependencies organized.</p> <p>1) Navigate to your project folder:</p> <pre><code>cd /path/to/general_projects\n</code></pre> <ol> <li>Initialize Poetry (if not already set up):</li> </ol> <pre><code>poetry init\n</code></pre> <p>(You can leave dependencies empty for now.)</p> <ol> <li>Install MkDocs and the Material theme:</li> </ol> <pre><code>poetry add --group dev mkdocs mkdocs-material\n</code></pre> <ol> <li>Verify the installation:</li> </ol> <pre><code>poetry run mkdocs --version\n</code></pre> <p>Expected output:</p> <pre><code>mkdocs, version X.X.X from ...\n</code></pre>"},{"location":"guides/development_and_devops/mkdocs_tutorial/#step-2-create-mkdocs-file-structure","title":"Step 2: Create MkDocs File Structure","text":"<p>MkDocs expects content inside a <code>docs/</code> directory.</p> <ol> <li>Initialize MkDocs</li> </ol> <pre><code>mkdocs new .\n</code></pre> <p>This creates:</p> <pre><code>.\n\u251c\u2500\u2500 docs\n\u2502   \u2514\u2500\u2500 index.md  # Homepage content\n\u251c\u2500\u2500 mkdocs.yml  # Configuration file\n</code></pre> <p>We can add extra folders following the same template:</p> <pre><code>\u251c\u2500\u2500 docs\n\u2502   \u251c\u2500\u2500 guides\n\u2502   \u2502   \u251c\u2500\u2500 deep_learning\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 overview.md\n\u2502   \u2502   \u251c\u2500\u2500 projects\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 overview.md\n\u2502   \u2502   \u251c\u2500\u2500 software_architecture\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 SOLID_principles.md\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 overview.md\n\u2502   \u2502   \u2514\u2500\u2500 unit_testing\n\u2502   \u2502       \u2514\u2500\u2500 overview.md\n\u2502   \u2514\u2500\u2500 index.md\n\u251c\u2500\u2500 mkdocs.yml\n</code></pre> <ol> <li>Modify <code>**mkdocs.yml**</code> to use the Material theme and ensure proper navigation:</li> </ol> <pre><code>site_name: My Software &amp; Data Science Portfolio\nsite_url: https://yourusername.github.io/repository-name/\n\ntheme:\n  name: material\n  features:\n    - navigation.instant\n    - navigation.tabs\n    - navigation.top\n    - search.suggest\n    - search.highlight\n  palette:\n    scheme: default\n  icon:\n    logo: material/book\n\nnav:\n  - Home: index.md\n  - Software Architecture:\n      - Overview: guides/software_architecture/overview.md\n      - SOLID Principles: guides/software_architecture/SOLID_principles.md\n  - Unit Testing:\n      - Overview: guides/unit_testing/overview.md\n  - Deep Learning:\n      - Overview: guides/deep_learning/overview.md\n  - Projects:\n      - Overview: guides/projects/overview.md\n\nextra_css:\n  - assets/stylesheets/extra.css\n\nextra_javascript:\n  - assets/javascripts/extra.js\n\nmarkdown_extensions:\n  - admonition\n  - pymdownx.highlight\n  - pymdownx.superfences\n  - toc:\n      permalink: true\n\nplugins:\n  - search\n</code></pre> <ol> <li>Create the necessary folders and files:</li> </ol> <pre><code>mkdir -p docs/guides/software_architecture docs/guides/unit_testing docs/guides/deep_learning docs/guides/projects\n</code></pre>"},{"location":"guides/development_and_devops/mkdocs_tutorial/#step-3-run-mkdocs-locally","title":"** Step 3: Run MkDocs Locally**","text":"<p>To preview the documentation before deploying:</p> <pre><code>poetry run mkdocs build\npoetry run mkdocs serve --dev-addr=0.0.0.0:8080\n</code></pre> <p>Open http://0.0.0.0:8080/ in your browser to verify.</p>"},{"location":"guides/development_and_devops/mkdocs_tutorial/#step-4-manual-deployment-to-github-pages","title":"** Step 4: Manual Deployment to GitHub Pages**","text":"<ol> <li> <p>Ensure GitHub Pages is enabled:</p> </li> <li> <p>Go to Settings &gt; Pages in your repo.</p> </li> <li> <p>Set Branch to <code>gh-pages</code>, and select **/ (root)<code>(NOT/docs</code> !!!).</p> </li> <li> <p>Disable Jekyll to prevent conflicts:</p> </li> </ol> <pre><code>touch docs/.nojekyll\n</code></pre> <ol> <li>Commit and push all changes:</li> </ol> <pre><code>git add .\ngit commit -m \"Initial MkDocs setup\"\ngit push origin main\n</code></pre> <ol> <li>Deploy manually:</li> </ol> <pre><code>poetry run mkdocs gh-deploy --force\n</code></pre> <ol> <li>Verify deployment at:</li> </ol> <pre><code>https://yourusername.github.io/repository-name/\n</code></pre>"},{"location":"guides/development_and_devops/mkdocs_tutorial/#step-5-set-up-github-actions-for-automatic-deployment","title":"** Step 5: Set Up GitHub Actions for Automatic Deployment**","text":"<p>Instead of running <code>mkdocs gh-deploy</code> manually, automate deployment when merging into <code>main</code>.</p> <ol> <li>Create the workflow file:</li> </ol> <pre><code>mkdir -p .github/workflows\nnano .github/workflows/deploy-mkdocs.yml\n</code></pre> <ol> <li>Add the following configuration:</li> </ol> <pre><code>name: Deploy MkDocs to GitHub Pages\n\non:\n  push:\n    branches:\n      - main\n\npermissions:\n  contents: write\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.11'\n\n      - name: Install Poetry\n        run: pip install poetry\n\n      - name: Install dependencies\n        run: poetry install --no-root\n\n      - name: Deploy MkDocs\n        run: poetry run mkdocs gh-deploy --force\n</code></pre> <ol> <li>Commit and push the workflow:</li> </ol> <pre><code>git add .github/workflows/deploy-mkdocs.yml\ngit commit -m \"Add GitHub Actions for MkDocs deployment\"\ngit push origin main\n</code></pre> <ol> <li> <p>Test Automatic Deployment:</p> </li> <li> <p>Go to GitHub &gt; Actions tab.</p> </li> <li>Ensure the workflow runs successfully after merging a branch into <code>**main**</code>.</li> <li>Once finished, visit your site to check the updates.</li> </ol>"},{"location":"guides/development_and_devops/mkdocs_tutorial/#summary-quick-commands","title":"** Summary: Quick Commands**","text":""},{"location":"guides/development_and_devops/mkdocs_tutorial/#run-mkdocs-locally","title":"Run MkDocs Locally","text":"<pre><code>poetry run mkdocs serve\n</code></pre>"},{"location":"guides/development_and_devops/mkdocs_tutorial/#deploy-manually","title":"Deploy Manually","text":"<pre><code>poetry run mkdocs gh-deploy --force\n</code></pre>"},{"location":"guides/development_and_devops/mkdocs_tutorial/#enable-github-actions-for-automatic-deployment","title":"Enable GitHub Actions for Automatic Deployment","text":"<pre><code>git push origin main\n</code></pre> <p>Now you have a fully automated MkDocs site deployed on GitHub Pages! </p>"},{"location":"guides/development_and_devops/overview/","title":"Overview","text":""},{"location":"guides/development_and_devops/overview/#tbd","title":"TBD","text":"<p>Best practices in pytest for testing, Dev Containers for stable environments, CI/CD integration, and more.</p>"},{"location":"guides/development_and_devops/versioning_tutorial/","title":"Guide: Setting Up Automatic Versioning in GitHub with GitHub Actions","text":"<p>This guide explains how to implement automatic versioning for your projects using GitHub Actions. This setup ensures that:</p> <ul> <li>A new Git tag is created whenever a version change is detected.</li> <li>A GitHub Release is automatically generated, attaching the <code>CHANGELOG.md</code>.</li> <li>Versioning works dynamically for multiple projects, avoiding hardcoded project names.</li> </ul>"},{"location":"guides/development_and_devops/versioning_tutorial/#step-1-create-the-necessary-files","title":"Step 1: Create the Necessary Files","text":""},{"location":"guides/development_and_devops/versioning_tutorial/#1-add-a-version-file-for-your-package","title":"1. Add a <code>VERSION</code> File for Your Package","text":"<p>Each package should have its own <code>VERSION</code> file.</p> <p>Example for <code>database_toolkit/</code>:</p> <pre><code>echo \"1.0.0\" &gt; database_toolkit/VERSION\n</code></pre>"},{"location":"guides/development_and_devops/versioning_tutorial/#2-add-a-changelogmd-file-for-your-package","title":"2. Add a <code>CHANGELOG.md</code> File for Your Package","text":"<pre><code>touch database_toolkit/CHANGELOG.md\n</code></pre> <p>Example content:</p> <pre><code># **Changelog**\n\nAll notable changes to this project will be documented in this file.\n\n## **[Unreleased]**\n- Describe upcoming changes here.\n\n## **[0.1.0]** - YYYY-MM-DD\n### **Added**\n- Initial release of ` project_name `.\n- Implemented core utilities.\n- Added unit tests.\n\n### **Fixed**\n- N/A\n\n### **Changed**\n- N/A\n\n### **Removed**\n- N/A\n\n---\n</code></pre>"},{"location":"guides/development_and_devops/versioning_tutorial/#3-create-a-projects-file","title":"3. Create a <code>PROJECTS</code> File","text":"<p>This file will list all the packages that require versioning. Heads-up: the PROJECT file should live in the root of the repository.</p> <pre><code>echo \"database_toolkit\" &gt; PROJECTS\n</code></pre> <p>If you have multiple projects, list them one per line:</p> <pre><code>database_toolkit\nanother_project\n</code></pre>"},{"location":"guides/development_and_devops/versioning_tutorial/#step-2-create-the-github-actions-workflow","title":"Step 2: Create the GitHub Actions Workflow","text":""},{"location":"guides/development_and_devops/versioning_tutorial/#1-create-the-workflow-file","title":"1.  Create the Workflow File","text":"<p>In the root of your repository, create the following Workflow File:</p> <pre><code>mkdir -p .github/workflows\nnano .github/workflows/versioning.yml\n</code></pre>"},{"location":"guides/development_and_devops/versioning_tutorial/#2-add-the-following-configuration","title":"2. Add the Following Configuration","text":"<pre><code>name: Automatic Versioning\n\non:\n  push:\n    branches:\n      - main  # Runs when merging into main\n\npermissions:\n  contents: write\n\njobs:\n  tag_version:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Read project names\n        id: read_projects\n        run: echo \"PROJECTS=$(cat PROJECTS)\" &gt;&gt; $GITHUB_ENV\n\n      - name: Process Each Project\n        env:\n          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Set the token for authentication\n        run: |\n          for project in ${{ env.PROJECTS }}; do\n            echo \"Processing project: $project\"\n\n            # Read version file\n            VERSION=$(cat $project/VERSION)\n            echo \"Detected version $VERSION for $project\"\n\n            # Check if the tag already exists in remote\n            if git ls-remote --tags origin | grep -q \"refs/tags/v${VERSION}\"; then\n              echo \"Tag v${VERSION} already exists for $project, skipping...\"\n              continue\n            fi\n\n            # Create a Git tag\n            git config --global user.name \"github-actions\"\n            git config --global user.email \"github-actions@github.com\"\n            git tag -a \"v${VERSION}\" -m \"Release version ${VERSION} for ${project}\"\n            git push origin \"v${VERSION}\"\n\n            # Create GitHub release\n            gh release create \"v${VERSION}\" --title \"Release ${VERSION}\" --notes-file $project/CHANGELOG.md\n          done\n</code></pre>"},{"location":"guides/development_and_devops/versioning_tutorial/#step-3-commit-and-push-the-workflow","title":"Step 3: Commit and Push the Workflow","text":"<pre><code>git add PROJECTS .github/workflows/versioning.yml database_toolkit/VERSION database_toolkit/CHANGELOG.md\ngit commit -m \"Add automatic versioning workflow\"\ngit push origin adding_versioning\n</code></pre>"},{"location":"guides/development_and_devops/versioning_tutorial/#step-4-merge-the-workflow-into-main","title":"Step 4: Merge the Workflow into <code>main</code>","text":"<pre><code>git checkout main\ngit merge adding_versioning\ngit push origin main\n</code></pre>"},{"location":"guides/development_and_devops/versioning_tutorial/#step-5-test-the-workflow","title":"Step 5: Test the Workflow","text":""},{"location":"guides/development_and_devops/versioning_tutorial/#1-update-the-version-in-version-file","title":"1. Update the Version in <code>VERSION</code> File","text":"<pre><code>echo \"1.0.1\" &gt; database_toolkit/VERSION\ngit add database_toolkit/VERSION\ngit commit -m \"Bump version to 1.0.1\"\ngit push origin main\n</code></pre>"},{"location":"guides/development_and_devops/versioning_tutorial/#2-check-the-github-actions-execution","title":"2.  Check the GitHub Actions Execution","text":"<ul> <li>Go to GitHub &gt; Actions.</li> <li>The workflow should run and:</li> <li>Detect the version change.</li> <li>Create a new Git tag (<code>v1.0.1</code>).</li> <li>Publish a GitHub Release, attaching <code>CHANGELOG.md</code>.</li> </ul> <p>Now you have a fully automated versioning system in your GitHub repository! </p>"},{"location":"guides/projects/overview/","title":"Overview","text":""},{"location":"guides/projects/overview/#tbd","title":"TBD","text":"<p>A showcase of real-world applications that reinforce these concepts through hands-on implementation.</p>"},{"location":"guides/software_architecture/SOLID_principles/","title":"SOLID Principles","text":""},{"location":"guides/software_architecture/SOLID_principles/#solid-principles","title":"SOLID Principles","text":"<p>The SOLID principles are foundational for creating maintainable and scalable software. These principles guide developers in designing mid-level software structures that:</p> <ul> <li>Tolerate change</li> <li>Are easy to understand</li> <li>Serve as reusable components in various software systems</li> </ul>"},{"location":"guides/software_architecture/SOLID_principles/#single-responsibility-principle-srp","title":"Single Responsibility Principle (SRP)","text":"<p>Definition: A class should have only one reason to change, meaning it should only have one job or responsibility.</p>"},{"location":"guides/software_architecture/SOLID_principles/#example","title":"Example","text":"<pre><code># Bad example\nclass ReportManager:\n    def generate_report(self):\n        # logic for generating report\n        pass\n\n    def save_to_file(self):\n        # logic for saving report to file\n        pass\n\n# Good example (separating responsibilities)\nclass ReportGenerator:\n    def generate_report(self):\n        # logic for generating report\n        pass\n\nclass ReportSaver:\n    def save_to_file(self, report):\n        # logic for saving report to file\n        pass\n</code></pre>"},{"location":"guides/software_architecture/SOLID_principles/#key-takeaway","title":"Key Takeaway","text":"<p>A module should be responsible to one and only one actor. This ensures clarity, maintainability, and flexibility.</p>"},{"location":"guides/software_architecture/SOLID_principles/#open-closed-principle-ocp","title":"Open-Closed Principle (OCP)","text":"<p>Definition: Software entities (classes, modules, functions, etc.) should be open for extension but closed for modification.</p>"},{"location":"guides/software_architecture/SOLID_principles/#counter-example-violation-of-ocp","title":"Counter-Example (Violation of OCP)","text":"<pre><code>class Shape:\n    def __init__(self, shape_type: str, dimension: float):\n        self.shape_type = shape_type\n        self.dimension = dimension\n\n    def calculate_area(self) -&gt; float:\n        if self.shape_type == \"circle\":\n            return 3.14 * (self.dimension ** 2)\n        elif self.shape_type == \"square\":\n            return self.dimension ** 2\n        else:\n            raise ValueError(\"Unknown shape type\")\n</code></pre> <p>Problems:</p> <ul> <li>Adding a new shape requires modifying the <code>calculate_area</code> method.</li> </ul>"},{"location":"guides/software_architecture/SOLID_principles/#corrected-example-applying-ocp","title":"Corrected Example (Applying OCP)","text":"<pre><code>from abc import ABC, abstractmethod\n\nclass Shape(ABC):\n    @abstractmethod\n    def calculate_area(self) -&gt; float:\n        pass\n\nclass Circle(Shape):\n    def __init__(self, radius: float):\n        self.radius = radius\n\n    def calculate_area(self) -&gt; float:\n        return 3.14 * (self.radius ** 2)\n\nclass Square(Shape):\n    def __init__(self, side: float):\n        self.side = side\n\n    def calculate_area(self) -&gt; float:\n        return self.side ** 2\n</code></pre>"},{"location":"guides/software_architecture/SOLID_principles/#key-takeaway_1","title":"Key Takeaway","text":"<p>OCP ensures new functionality is added through extensions rather than modifications, making the system more maintainable.</p>"},{"location":"guides/software_architecture/SOLID_principles/#liskov-substitution-principle-lsp","title":"Liskov Substitution Principle (LSP)","text":"<p>Definition: Derived classes must be substitutable for their base classes without affecting correctness.</p>"},{"location":"guides/software_architecture/SOLID_principles/#violation-example","title":"Violation Example","text":"<pre><code>class Bird:\n    def fly(self) -&gt; str:\n        return \"I'm flying!\"\n\nclass Penguin(Bird):\n    def fly(self) -&gt; str:\n        raise NotImplementedError(\"Penguins can't fly\")\n</code></pre>"},{"location":"guides/software_architecture/SOLID_principles/#correct-application","title":"Correct Application","text":"<pre><code>from abc import ABC, abstractmethod\n\nclass Bird(ABC):\n    @abstractmethod\n    def move(self) -&gt; str:\n        pass\n\nclass Sparrow(Bird):\n    def move(self) -&gt; str:\n        return \"I'm flying!\"\n\nclass Penguin(Bird):\n    def move(self) -&gt; str:\n        return \"I'm swimming!\"\n</code></pre>"},{"location":"guides/software_architecture/SOLID_principles/#key-takeaway_2","title":"Key Takeaway","text":"<p>Subclasses should extend behavior without altering the expected behavior of the base class.</p>"},{"location":"guides/software_architecture/SOLID_principles/#interface-segregation-principle-isp","title":"Interface Segregation Principle (ISP)","text":"<p>Definition: Clients should not be forced to depend on interfaces they do not use.</p>"},{"location":"guides/software_architecture/SOLID_principles/#violation-example_1","title":"Violation Example","text":"<pre><code>class Animal:\n    def fly(self) -&gt; None:\n        pass\n\n    def swim(self) -&gt; None:\n        pass\n\nclass Bird(Animal):\n    def fly(self) -&gt; None:\n        print(\"I'm flying!\")\n\n    def swim(self) -&gt; None:\n        raise NotImplementedError(\"Birds can't swim\")\n</code></pre>"},{"location":"guides/software_architecture/SOLID_principles/#correct-application_1","title":"Correct Application","text":"<pre><code>from abc import ABC, abstractmethod\n\nclass Flyable(ABC):\n    @abstractmethod\n    def fly(self) -&gt; None:\n        pass\n\nclass Swimmable(ABC):\n    @abstractmethod\n    def swim(self) -&gt; None:\n        pass\n\nclass Bird(Flyable):\n    def fly(self) -&gt; None:\n        print(\"I'm flying!\")\n\nclass Fish(Swimmable):\n    def swim(self) -&gt; None:\n        print(\"I'm swimming!\")\n</code></pre>"},{"location":"guides/software_architecture/SOLID_principles/#key-takeaway_3","title":"Key Takeaway","text":"<p>Create specific interfaces rather than forcing classes to implement unnecessary methods.</p>"},{"location":"guides/software_architecture/SOLID_principles/#dependency-inversion-principle-dip","title":"Dependency Inversion Principle (DIP)","text":"<p>Definition:</p> <ul> <li>High-level modules should not depend on low-level modules. Both should depend on abstractions.</li> <li>Abstractions should not depend on details. Details should depend on abstractions.</li> </ul>"},{"location":"guides/software_architecture/SOLID_principles/#violation-example_2","title":"Violation Example","text":"<pre><code>class EmailSender:\n    def send_email(self, message: str) -&gt; None:\n        print(f\"Sending email: {message}\")\n\nclass NotificationService:\n    def __init__(self):\n        self.email_sender = EmailSender()\n\n    def notify(self, message: str) -&gt; None:\n        self.email_sender.send_email(message)\n</code></pre>"},{"location":"guides/software_architecture/SOLID_principles/#correct-application-applying-dip","title":"Correct Application (Applying DIP)","text":"<pre><code>from abc import ABC, abstractmethod\n\nclass Notifier(ABC):\n    @abstractmethod\n    def notify(self, message: str) -&gt; None:\n        pass\n\nclass EmailSender(Notifier):\n    def notify(self, message: str) -&gt; None:\n        print(f\"Sending email: {message}\")\n\nclass SMSNotifier(Notifier):\n    def notify(self, message: str) -&gt; None:\n        print(f\"Sending SMS: {message}\")\n\nclass NotificationService:\n    def __init__(self, notifier: Notifier):\n        self.notifier = notifier\n\n    def notify(self, message: str) -&gt; None:\n        self.notifier.notify(message)\n</code></pre>"},{"location":"guides/software_architecture/SOLID_principles/#key-takeaway_4","title":"Key Takeaway","text":"<p>DIP helps create modular, loosely coupled systems that are more adaptable and maintainable.</p>"},{"location":"guides/software_architecture/SOLID_principles/#final-thoughts","title":"Final Thoughts","text":"<p>By applying SOLID principles, developers create software that is flexible, maintainable, and scalable. These principles provide a strong foundation for designing robust systems that can evolve efficiently with changing business needs.</p>"},{"location":"guides/software_architecture/overview/","title":"Overview","text":""},{"location":"guides/software_architecture/overview/#software-architecture-a-foundation-for-business-agility","title":"Software Architecture: A Foundation for Business Agility","text":"<p>Software architecture is often seen as a discipline of deep technical expertise and high-level decision-making, shaping how a system is built and evolves over time. However, at its core, software architecture is not just about structure\u2014it is about enabling change. A well-designed architecture allows software to adapt to evolving business needs, scale with new projects, and remain maintainable over its lifetime.</p> <p>A software architect is not an abstract strategist disconnected from programming; rather, they are an experienced developer who continues to engage with the codebase while guiding the team. Their role is to ensure that the system\u2019s design maximizes developer productivity and supports efficient development, deployment, and maintenance.</p> <p>Contrary to common belief, the ultimate goal of architecture is not merely to make software \"work\"\u2014poorly architected systems can function, but they often become bottlenecks when businesses need to scale or pivot. Good architecture minimizes long-term costs, maximizes flexibility, and ensures that a system remains robust in the face of changing requirements. By designing systems with clear component separation and well-defined communication patterns, businesses can respond more quickly to customer needs, integrate new features efficiently, and sustain software quality over time.</p>"},{"location":"guides/workflows/overview/","title":"Overview","text":""},{"location":"guides/workflows/overview/#tbd","title":"TBD","text":"<p>A showcase of real-world applications that reinforce these concepts through hands-on implementation.</p>"}]}