{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to My Software &amp; Data Science Portfolio \ud83d\ude80","text":"<p>This portfolio highlights my expertise in software architecture, data science, DevOps, workflows, and applied projects. It serves as a structured documentation of best practices, key principles, and hands-on experience in building scalable, maintainable, and efficient software systems.</p>"},{"location":"#what-you-will-find-here","title":"\ud83d\udd0d What You Will Find Here","text":"<ul> <li>\ud83d\udee0\ufe0f Software Architecture: Principles and patterns for designing flexible, scalable, and maintainable systems, including SOLID principles and Clean Architecture concepts. </li> <li>\ud83d\udcc8 Workflows: Approaches for prioritizing development, agile methodologies, and efficient software delivery. </li> <li>\ud83e\udd16 Data Science &amp; AI: Key concepts and learning projects in Artificial Intelligence and Machine Learning, covering topics like autoencoders, reinforcement learning, computer vision, and more. </li> <li>\ud83d\udcbb Development &amp; DevOps: Best practices in pytest for testing, Dev Containers for stable environments, CI/CD integration, and more. </li> <li>\ud83d\ude80 Projects: A showcase of real-world applications that reinforce these concepts through hands-on implementation.</li> </ul>"},{"location":"#purpose-of-this-portfolio","title":"\ud83c\udfaf Purpose of This Portfolio","text":"<p>This portfolio serves both as a learning resource and a technical showcase for developers, mentees, recruiters, and potential clients. Whether you're exploring software design patterns, improving your testing skills, or diving into AI/ML concepts, you\u2019ll find structured content designed to facilitate learning and best practices.</p>"},{"location":"#connect-with-me","title":"\ud83d\udcec Connect With Me","text":"<p>Feel free to reach out for discussions, collaborations, or networking. </p> <ul> <li>\ud83d\udd17 LinkedIn: Aldo Saltao Barros </li> <li>\ud83d\udcbb GitHub: aldojasb - General Projects Repository</li> </ul>"},{"location":"guides/data_science_and_ai/overview/","title":"Overview","text":""},{"location":"guides/data_science_and_ai/overview/#coming-soon","title":"Coming soon... \ud83d\udee0","text":"<p>Key concepts and learning projects in Artificial Intelligence and Machine Learning, covering topics like autoencoders, reinforcement learning, computer vision, and more.</p>"},{"location":"guides/development_and_devops/mkdocs_tutorial/","title":"MkDocs: Installing, Configuring, and Automating it with GitHub Pages","text":"<p>This tutorial provides a step-by-step walkthrough to install, configure, and deploy MkDocs manually and set up an automated deployment pipeline using GitHub Actions.</p>"},{"location":"guides/development_and_devops/mkdocs_tutorial/#step-1-install-mkdocs-with-poetry","title":"Step 1: Install MkDocs with Poetry","text":"<p>I use Poetry as a package manager to keep dependencies organized.</p>"},{"location":"guides/development_and_devops/mkdocs_tutorial/#1-navigate-to-your-project-folder","title":"1. Navigate to your project folder:","text":"<pre><code>cd /path/to/general_projects\n</code></pre>"},{"location":"guides/development_and_devops/mkdocs_tutorial/#2-initialize-poetry-if-not-already-set-up","title":"2. Initialize Poetry (if not already set up):","text":"<pre><code>poetry init\n</code></pre> <p>(You can leave dependencies empty for now.)</p>"},{"location":"guides/development_and_devops/mkdocs_tutorial/#3-install-mkdocs-and-the-material-theme","title":"3. Install MkDocs and the Material theme:","text":"<pre><code>poetry add --group dev mkdocs mkdocs-material\n</code></pre>"},{"location":"guides/development_and_devops/mkdocs_tutorial/#4-verify-the-installation","title":"4. Verify the installation:","text":"<pre><code>poetry run mkdocs --version\n</code></pre> <p>Expected output:</p> <pre><code>mkdocs, version X.X.X from ...\n</code></pre>"},{"location":"guides/development_and_devops/mkdocs_tutorial/#step-2-create-mkdocs-file-structure","title":"Step 2: Create MkDocs File Structure","text":"<p>MkDocs expects content inside a <code>docs/</code> directory.</p>"},{"location":"guides/development_and_devops/mkdocs_tutorial/#1-initialize-mkdocs","title":"1. Initialize MkDocs","text":"<pre><code>mkdocs new .\n</code></pre> <p>This creates:</p> <pre><code>.\n\u251c\u2500\u2500 docs\n\u2502   \u2514\u2500\u2500 index.md  # Homepage content\n\u251c\u2500\u2500 mkdocs.yml  # Configuration file\n</code></pre> <p>We can add extra folders following the same template:</p> <pre><code>\u251c\u2500\u2500 docs\n\u2502   \u251c\u2500\u2500 guides\n\u2502   \u2502   \u251c\u2500\u2500 deep_learning\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 overview.md\n\u2502   \u2502   \u251c\u2500\u2500 projects\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 overview.md\n\u2502   \u2502   \u251c\u2500\u2500 software_architecture\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 SOLID_principles.md\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 overview.md\n\u2502   \u2502   \u2514\u2500\u2500 unit_testing\n\u2502   \u2502       \u2514\u2500\u2500 overview.md\n\u2502   \u2514\u2500\u2500 index.md\n\u251c\u2500\u2500 mkdocs.yml\n</code></pre>"},{"location":"guides/development_and_devops/mkdocs_tutorial/#2-modify-mkdocsyml-to-use-the-material-theme-and-ensure-proper-navigation","title":"2. Modify <code>**mkdocs.yml**</code> to use the Material theme and ensure proper navigation:","text":"<pre><code>site_name: My Software &amp; Data Science Portfolio\nsite_url: https://yourusername.github.io/repository-name/\n\ntheme:\n  name: material\n  features:\n    - navigation.instant\n    - navigation.tabs\n    - navigation.top\n    - search.suggest\n    - search.highlight\n  palette:\n    scheme: default\n  icon:\n    logo: material/book\n\nnav:\n  - Home: index.md\n  - Software Architecture:\n      - Overview: guides/software_architecture/overview.md\n      - SOLID Principles: guides/software_architecture/SOLID_principles.md\n  - Unit Testing:\n      - Overview: guides/unit_testing/overview.md\n  - Deep Learning:\n      - Overview: guides/deep_learning/overview.md\n  - Projects:\n      - Overview: guides/projects/overview.md\n\nextra_css:\n  - assets/stylesheets/extra.css\n\nextra_javascript:\n  - assets/javascripts/extra.js\n\nmarkdown_extensions:\n  - admonition\n  - pymdownx.highlight\n  - pymdownx.superfences\n  - toc:\n      permalink: true\n\nplugins:\n  - search\n</code></pre>"},{"location":"guides/development_and_devops/mkdocs_tutorial/#3-create-the-necessary-folders-and-files","title":"3. Create the necessary folders and files:","text":"<pre><code>mkdir -p docs/guides/software_architecture docs/guides/unit_testing docs/guides/deep_learning docs/guides/projects\n</code></pre>"},{"location":"guides/development_and_devops/mkdocs_tutorial/#step-3-run-mkdocs-locally","title":"Step 3: Run MkDocs Locally","text":"<p>To preview the documentation before deploying:</p> <pre><code>poetry run mkdocs build --clean\npoetry run mkdocs serve --dev-addr=0.0.0.0:8080\n</code></pre> <p>Open http://0.0.0.0:8080/ in your browser to verify.</p>"},{"location":"guides/development_and_devops/mkdocs_tutorial/#step-4-manual-deployment-to-github-pages","title":"Step 4: Manual Deployment to GitHub Pages","text":""},{"location":"guides/development_and_devops/mkdocs_tutorial/#1-ensure-github-pages-is-enabled","title":"1. Ensure GitHub Pages is enabled:","text":"<ul> <li>Go to Settings &gt; Pages in your repo.</li> <li>Set Branch to <code>gh-pages</code>, and select **/ (root)<code>(NOT/docs</code> !!!).</li> </ul>"},{"location":"guides/development_and_devops/mkdocs_tutorial/#2-disable-jekyll-to-prevent-conflicts","title":"2. Disable Jekyll to prevent conflicts:","text":"<pre><code>touch docs/.nojekyll\n</code></pre>"},{"location":"guides/development_and_devops/mkdocs_tutorial/#3-commit-and-push-all-changes","title":"3. Commit and push all changes:","text":"<pre><code>git add .\ngit commit -m \"Initial MkDocs setup\"\ngit push origin main\n</code></pre>"},{"location":"guides/development_and_devops/mkdocs_tutorial/#4-deploy-manually","title":"4. Deploy manually:","text":"<pre><code>poetry run mkdocs gh-deploy --force\n</code></pre>"},{"location":"guides/development_and_devops/mkdocs_tutorial/#5-verify-deployment-at","title":"5. Verify deployment at:","text":"<pre><code>https://yourusername.github.io/repository-name/\n</code></pre>"},{"location":"guides/development_and_devops/mkdocs_tutorial/#step-5-set-up-github-actions-for-automatic-deployment","title":"Step 5: Set Up GitHub Actions for Automatic Deployment","text":"<p>Instead of running <code>mkdocs gh-deploy</code> manually, automate deployment when merging into <code>main</code>.</p>"},{"location":"guides/development_and_devops/mkdocs_tutorial/#1-create-the-workflow-file","title":"1. Create the workflow file:","text":"<pre><code>mkdir -p .github/workflows\nnano .github/workflows/deploy-mkdocs.yml\n</code></pre>"},{"location":"guides/development_and_devops/mkdocs_tutorial/#2-add-the-following-configuration","title":"2. Add the following configuration:","text":"<pre><code>name: Deploy MkDocs to GitHub Pages\n\non:\n  push:\n    branches:\n      - main\n\npermissions:\n  contents: write\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.11'\n\n      - name: Install Poetry\n        run: pip install poetry\n\n      - name: Install dependencies\n        run: poetry install --no-root\n\n      - name: Deploy MkDocs\n        run: poetry run mkdocs gh-deploy --force\n</code></pre>"},{"location":"guides/development_and_devops/mkdocs_tutorial/#3-commit-and-push-the-workflow","title":"3. Commit and push the workflow:","text":"<pre><code>git add .github/workflows/deploy-mkdocs.yml\ngit commit -m \"Add GitHub Actions for MkDocs deployment\"\ngit push origin main\n</code></pre>"},{"location":"guides/development_and_devops/mkdocs_tutorial/#4-test-automatic-deployment","title":"4. Test Automatic Deployment:","text":"<ul> <li>Go to GitHub &gt; Actions tab.</li> <li>Ensure the workflow runs successfully after merging a branch into <code>**main**</code>.</li> <li>Once finished, visit your site to check the updates.</li> </ul>"},{"location":"guides/development_and_devops/mkdocs_tutorial/#common-errors-and-fixes","title":"Common Errors and Fixes","text":""},{"location":"guides/development_and_devops/mkdocs_tutorial/#error-oserror-errno-98-address-already-in-use","title":"** Error: OSError: [Errno 98] Address already in use**","text":"<p>Fix: If MkDocs fails to start due to a port conflict, find and kill the process occupying the port.</p> <pre><code>lsof -i :8080\nkill -9 &lt;PID&gt;\n</code></pre> <p>Then restart MkDocs:</p> <pre><code>poetry run mkdocs serve --dev-addr=0.0.0.0:8080\n</code></pre>"},{"location":"guides/development_and_devops/mkdocs_tutorial/#summary-quick-commands","title":"Summary: Quick Commands","text":""},{"location":"guides/development_and_devops/mkdocs_tutorial/#run-mkdocs-locally","title":"Run MkDocs Locally","text":"<pre><code>poetry run mkdocs serve\n</code></pre>"},{"location":"guides/development_and_devops/mkdocs_tutorial/#deploy-manually","title":"Deploy Manually","text":"<pre><code>poetry run mkdocs gh-deploy --force\n</code></pre>"},{"location":"guides/development_and_devops/mkdocs_tutorial/#enable-github-actions-for-automatic-deployment","title":"Enable GitHub Actions for Automatic Deployment","text":"<pre><code>git push origin main\n</code></pre> <p>Now you have a fully automated MkDocs site deployed on GitHub Pages! </p>"},{"location":"guides/development_and_devops/overview/","title":"\u2699\ufe0f Development &amp; DevOps Overview","text":""},{"location":"guides/development_and_devops/overview/#why-development-devops-matter","title":"Why Development &amp; DevOps Matter","text":"<p>Modern Data Scientists don\u2019t stop at writing Jupyter Notebooks. Training models or creating predictive services also involves maintaining reliable infrastructure, automating deployments, and ensuring smooth collaboration between other Data Scientists, developers and operations teams. By following the guides in this section, you'll gain practical knowledge to:  </p> <p>\u2705 Improve developer productivity through streamlined workflows. \u2705 Reduce manual effort by automating repetitive tasks. \u2705 Maintain clear, well-documented projects for better collaboration. \u2705 Ensure consistent and scalable deployments.  </p> <p>Stay tuned as I will add more hands-on guides and best practices to this section! </p>"},{"location":"guides/development_and_devops/overview/#what-this-section-covers","title":"What This Section Covers","text":"<p>This section focuses on best practices, tools, and workflows that bridge development and operations, ensuring efficiency, scalability, and maintainability in software projects. Whether you're setting up documentation pipelines, managing version control, or automating workflows, you'll find practical guides and hands-on tutorials here.  </p>"},{"location":"guides/development_and_devops/overview/#topics-included","title":"Topics Included","text":""},{"location":"guides/development_and_devops/overview/#mkdocs-tutorial","title":"\ud83d\udcd6 MkDocs Tutorial","text":"<p>Learn how to set up, configure, and deploy documentation using MkDocs. This tutorial covers: - Structuring your documentation. - Customizing MkDocs themes and plugins. - Deploying documentation on GitHub Pages or other hosting platforms.  </p>"},{"location":"guides/development_and_devops/overview/#versioning-tutorial","title":"\ud83d\udcd6 Versioning Tutorial","text":"<p>Effective version control is essential for managing changes in software projects. This guide walks through: - Best practices for semantic versioning in development. - Setting up automated versioning using tools like Git, GitHub Actions, and tagging strategies. - Integrating versioning into CI/CD workflows for smooth deployments.  </p>"},{"location":"guides/development_and_devops/versioning_tutorial/","title":"Guide: Setting Up Automatic Versioning in GitHub with GitHub Actions","text":"<p>This guide explains how to implement automatic versioning for your projects using GitHub Actions. This setup ensures that:</p> <ul> <li>A new Git tag is created whenever a version change is detected.</li> <li>A GitHub Release is automatically generated, attaching the <code>CHANGELOG.md</code>.</li> <li>Versioning works dynamically for multiple projects, avoiding hardcoded project names.</li> </ul>"},{"location":"guides/development_and_devops/versioning_tutorial/#step-1-create-the-necessary-files","title":"Step 1: Create the Necessary Files","text":""},{"location":"guides/development_and_devops/versioning_tutorial/#1-add-a-version-file-for-your-package","title":"1. Add a <code>VERSION</code> File for Your Package","text":"<p>Each package should have its own <code>VERSION</code> file.</p> <p>Example for <code>database_toolkit/</code>:</p> <pre><code>echo \"1.0.0\" &gt; database_toolkit/VERSION\n</code></pre>"},{"location":"guides/development_and_devops/versioning_tutorial/#2-add-a-changelogmd-file-for-your-package","title":"2. Add a <code>CHANGELOG.md</code> File for Your Package","text":"<pre><code>touch database_toolkit/CHANGELOG.md\n</code></pre> <p>Example content:</p> <pre><code># **Changelog**\n\nAll notable changes to this project will be documented in this file.\n\n## **[Unreleased]**\n- Describe upcoming changes here.\n\n## **[0.1.0]** - YYYY-MM-DD\n### **Added**\n- Initial release of ` project_name `.\n- Implemented core utilities.\n- Added unit tests.\n\n### **Fixed**\n- N/A\n\n### **Changed**\n- N/A\n\n### **Removed**\n- N/A\n\n---\n</code></pre>"},{"location":"guides/development_and_devops/versioning_tutorial/#3-create-a-projects-file","title":"3. Create a <code>PROJECTS</code> File","text":"<p>This file will list all the packages that require versioning. Heads-up: the PROJECT file should live in the root of the repository.</p> <pre><code>echo \"database_toolkit\" &gt; PROJECTS\n</code></pre> <p>If you have multiple projects, list them one per line:</p> <pre><code>database_toolkit\nanother_project\n</code></pre>"},{"location":"guides/development_and_devops/versioning_tutorial/#step-2-create-the-github-actions-workflow","title":"Step 2: Create the GitHub Actions Workflow","text":""},{"location":"guides/development_and_devops/versioning_tutorial/#1-create-the-workflow-file","title":"1.  Create the Workflow File","text":"<p>In the root of your repository, create the following Workflow File:</p> <pre><code>mkdir -p .github/workflows\nnano .github/workflows/versioning.yml\n</code></pre>"},{"location":"guides/development_and_devops/versioning_tutorial/#2-add-the-following-configuration","title":"2. Add the Following Configuration","text":"<pre><code>name: Automatic Versioning\n\non:\n  push:\n    branches:\n      - main  # Runs when merging into main\n\npermissions:\n  contents: write\n\njobs:\n  tag_version:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Read project names\n        id: read_projects\n        run: echo \"PROJECTS=$(cat PROJECTS)\" &gt;&gt; $GITHUB_ENV\n\n      - name: Process Each Project\n        env:\n          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Set the token for authentication\n        run: |\n          for project in ${{ env.PROJECTS }}; do\n            echo \"Processing project: $project\"\n\n            # Read version file\n            VERSION=$(cat $project/VERSION)\n            echo \"Detected version $VERSION for $project\"\n\n            # Check if the tag already exists in remote\n            if git ls-remote --tags origin | grep -q \"refs/tags/v${VERSION}\"; then\n              echo \"Tag v${VERSION} already exists for $project, skipping...\"\n              continue\n            fi\n\n            # Create a Git tag\n            git config --global user.name \"github-actions\"\n            git config --global user.email \"github-actions@github.com\"\n            git tag -a \"v${VERSION}\" -m \"Release version ${VERSION} for ${project}\"\n            git push origin \"v${VERSION}\"\n\n            # Create GitHub release\n            gh release create \"v${VERSION}\" --title \"Release ${VERSION}\" --notes-file $project/CHANGELOG.md\n          done\n</code></pre>"},{"location":"guides/development_and_devops/versioning_tutorial/#step-3-commit-and-push-the-workflow","title":"Step 3: Commit and Push the Workflow","text":"<pre><code>git add PROJECTS .github/workflows/versioning.yml database_toolkit/VERSION database_toolkit/CHANGELOG.md\ngit commit -m \"Add automatic versioning workflow\"\ngit push origin adding_versioning\n</code></pre>"},{"location":"guides/development_and_devops/versioning_tutorial/#step-4-merge-the-workflow-into-main","title":"Step 4: Merge the Workflow into <code>main</code>","text":"<pre><code>git checkout main\ngit merge adding_versioning\ngit push origin main\n</code></pre>"},{"location":"guides/development_and_devops/versioning_tutorial/#step-5-test-the-workflow","title":"Step 5: Test the Workflow","text":""},{"location":"guides/development_and_devops/versioning_tutorial/#1-update-the-version-in-version-file","title":"1. Update the Version in <code>VERSION</code> File","text":"<pre><code>echo \"1.0.1\" &gt; database_toolkit/VERSION\ngit add database_toolkit/VERSION\ngit commit -m \"Bump version to 1.0.1\"\ngit push origin main\n</code></pre>"},{"location":"guides/development_and_devops/versioning_tutorial/#2-check-the-github-actions-execution","title":"2.  Check the GitHub Actions Execution","text":"<ul> <li>Go to GitHub &gt; Actions.</li> <li>The workflow should run and:</li> <li>Detect the version change.</li> <li>Create a new Git tag (<code>v1.0.1</code>).</li> <li>Publish a GitHub Release, attaching <code>CHANGELOG.md</code>.</li> </ul> <p>Now you have a fully automated versioning system in your GitHub repository! </p>"},{"location":"guides/projects/overview/","title":"Projects: Real-World Applications in Software &amp; Data Science","text":"<p>This section highlights key projects that bring Data Science, Software Engineering, and DevOps concepts to life. Each project is designed to solve real-world challenges and improve efficiency through hands-on implementation.  </p>"},{"location":"guides/projects/overview/#database-toolkit","title":"\ud83c\udfd7\ufe0f Database Toolkit","text":"<p>\ud83d\udd17 View on GitHub </p> <p>A powerful, scalable solution for generating synthetic datasets tailored to industrial applications.  </p> <p>Why it Matters? Businesses relying on machine learning models need high-quality training data. This toolkit automates data generation, anomaly simulation, and dataset merging, making it easier to test and deploy AI models.  </p> <p>Key Capabilities: \u2714 Automated generation of structured industrial pump data. \u2714 Custom anomaly injection for model testing. \u2714 Flexible factory design pattern to streamline dataset creation. \u2714 Built using SOLID principles for maintainability.  </p>"},{"location":"guides/projects/overview/#cookiecutter-template","title":"\ud83d\udee0\ufe0f Cookiecutter Template","text":"<p>\ud83d\udd17 View on GitHub </p> <p>A project template generator designed to standardize and accelerate the setup of new projects.  </p> <p>Why it Matters? Starting a new project often involves repetitive setup tasks. This template ensures that all new projects adhere to a consistent structure and include necessary configurations, reducing setup time and potential errors.  </p> <p>Key Features: \u2714 Pre-defined directory structures for various project types. \u2714 Inclusion of essential configuration files and dependencies. \u2714 Customization prompts to tailor the template to specific project needs. \u2714 Enhances collaboration by maintaining uniformity across projects.  </p>"},{"location":"guides/projects/overview/#dev-container","title":"\ud83d\udda5\ufe0f Dev Container","text":"<p>\ud83d\udd17 View on GitHub </p> <p>A pre-configured development environment that ensures consistency and isolation across development setups.  </p> <p>Why it Matters? Development environments can vary across machines, leading to inconsistencies and \"works on my machine\" issues. This dev container provides an isolated environment with all necessary tools and dependencies, ensuring that the development setup is uniform across all team members.  </p> <p>Key Features: \u2714 Isolated development environment to prevent conflicts with host systems. \u2714 Pre-installed tools and libraries, such as Python, pyenv, and Poetry. \u2714 Reproducible setups ensuring consistency across different machines. \u2714 Simplifies onboarding for new developers by providing a ready-to-use environment.  </p> <p>\ud83d\ude80 These projects exemplify practical applications of software engineering and data science principles, aiming to enhance productivity and maintainability in real-world scenarios.</p>"},{"location":"guides/software_architecture/SOLID_principles/","title":"\ud83c\udff0\ufe0f SOLID Principles","text":"<p>The SOLID principles are foundational for creating maintainable and scalable software. These principles guide developers in designing software structures that:</p> <ul> <li>Tolerate change</li> <li>Are easy to understand</li> <li>Serve as reusable components in various software systems</li> </ul> <p>Applying SOLID principles leads to cleaner, more adaptable code and a smoother development experience.  \ud83d\ude80</p>"},{"location":"guides/software_architecture/SOLID_principles/#single-responsibility-principle-srp","title":"Single Responsibility Principle (SRP)","text":"<p>Definition: A class should have only one reason to change, meaning it should have a single responsibility.</p>"},{"location":"guides/software_architecture/SOLID_principles/#counter-example-srp-violation","title":"\u274c Counter-Example (SRP Violation)","text":"<pre><code># A class handling multiple responsibilities\nclass InvoiceProcessor:\n    def calculate_total(self, items):\n        # logic for calculate total items\n        pass\n\n    def generate_pdf(self, invoice):\n        # logic for generate a pdf\n        pass\n\n    def send_email(self, invoice, email)\n        # logic to send a email\n        pass   \n</code></pre> <p>\ud83d\udea8 Problem: If you need to change how PDFs are generate, you might risk breaking other functionality like email sender.</p>"},{"location":"guides/software_architecture/SOLID_principles/#corrected-example-applying-srp","title":"\u2705 Corrected Example (Applying SRP)","text":"<pre><code># Good example: Separating responsibilities\nclass InvoiceCalculator:\n    def calculate_total(self, items):\n        # logic for generating report\n        pass\n\nclass InvoicePDFGenerator:\n    def generate_pdf(self, invoice):\n        # logic for generate a pdf\n        pass\n\nclass EmailSender:\n    def send_email(self, invoice, email):\n        # logic for send emails\n        pass\n</code></pre>"},{"location":"guides/software_architecture/SOLID_principles/#key-takeaway","title":"\ud83c\udfaf Key Takeaway","text":"<p>A module should be responsible to one and only one actor. This ensures clarity, maintainability, and flexibility.</p>"},{"location":"guides/software_architecture/SOLID_principles/#open-closed-principle-ocp","title":"Open-Closed Principle (OCP)","text":"<p>Definition: Software entities should be open for extension but closed for modification.</p>"},{"location":"guides/software_architecture/SOLID_principles/#counter-example-ocp-violation","title":"\u274c Counter-Example (OCP Violation)","text":"<pre><code>class Shape:\n    def __init__(self, shape_type: str, dimension: float):\n        self.shape_type = shape_type\n        self.dimension = dimension\n\n    def calculate_area(self) -&gt; float:\n        if self.shape_type == \"circle\":\n            return 3.14 * (self.dimension ** 2)\n        elif self.shape_type == \"square\":\n            return self.dimension ** 2\n        else:\n            raise ValueError(\"Unknown shape type\")\n</code></pre> <p>\ud83d\udea8 Problem: Adding a new shape requires modifying the <code>calculate_area</code> method, violating OCP.</p>"},{"location":"guides/software_architecture/SOLID_principles/#corrected-example-applying-ocp","title":"\u2705 Corrected Example (Applying OCP)","text":"<pre><code>from abc import ABC, abstractmethod\n\nclass Shape(ABC):\n    @abstractmethod\n    def calculate_area(self) -&gt; float:\n        pass\n\nclass Circle(Shape):\n    def __init__(self, radius: float):\n        self.radius = radius\n\n    def calculate_area(self) -&gt; float:\n        return 3.14 * (self.radius ** 2)\n\nclass Square(Shape):\n    def __init__(self, side: float):\n        self.side = side\n\n    def calculate_area(self) -&gt; float:\n        return self.side ** 2\n</code></pre>"},{"location":"guides/software_architecture/SOLID_principles/#key-takeaway_1","title":"\ud83c\udfaf Key Takeaway","text":"<p>OCP ensures new functionality is added through extensions rather than modifications, making the system more maintainable.</p>"},{"location":"guides/software_architecture/SOLID_principles/#liskov-substitution-principle-lsp","title":"Liskov Substitution Principle (LSP)","text":"<p>Definition: Derived classes must be substitutable for their base classes without affecting correctness.</p>"},{"location":"guides/software_architecture/SOLID_principles/#counter-example-lsp-violation","title":"\u274c Counter-Example (LSP Violation)","text":"<pre><code>class Bird:\n    def fly(self) -&gt; str:\n        return \"I'm flying!\"\n\nclass Penguin(Bird):\n    def fly(self) -&gt; str:\n        raise NotImplementedError(\"Penguins can't fly\")\n</code></pre> <p>\ud83d\udea8 Problem: <code>Penguin</code> violates LSP because it inherits behavior it cannot fulfill.</p>"},{"location":"guides/software_architecture/SOLID_principles/#corrected-example-applying-lsp","title":"\u2705 Corrected Example (Applying LSP)","text":"<pre><code>from abc import ABC, abstractmethod\n\nclass Bird(ABC):\n    @abstractmethod\n    def move(self) -&gt; str:\n        pass\n\nclass Sparrow(Bird):\n    def move(self) -&gt; str:\n        return \"I'm flying!\"\n\nclass Penguin(Bird):\n    def move(self) -&gt; str:\n        return \"I'm swimming!\"\n</code></pre>"},{"location":"guides/software_architecture/SOLID_principles/#key-takeaway_2","title":"\ud83c\udfaf Key Takeaway","text":"<p>Subclasses should extend behavior without altering the expected behavior of the base class.</p>"},{"location":"guides/software_architecture/SOLID_principles/#interface-segregation-principle-isp","title":"Interface Segregation Principle (ISP)","text":"<p>Definition: Clients should not be forced to depend on interfaces they do not use.</p>"},{"location":"guides/software_architecture/SOLID_principles/#counter-example-isp-violation","title":"\u274c Counter-Example (ISP Violation)","text":"<pre><code>class Animal:\n    def fly(self) -&gt; None:\n        pass\n\n    def swim(self) -&gt; None:\n        pass\n\nclass Bird(Animal):\n    def fly(self) -&gt; None:\n        print(\"I'm flying!\")\n\n    def swim(self) -&gt; None:\n        raise NotImplementedError(\"Birds can't swim\")\n</code></pre> <p>\ud83d\udea8 Problem: <code>Bird</code> is forced to implement <code>swim()</code>, which it doesn't need.</p>"},{"location":"guides/software_architecture/SOLID_principles/#corrected-example-applying-isp","title":"\u2705 Corrected Example (Applying ISP)","text":"<pre><code>from abc import ABC, abstractmethod\n\nclass Flyable(ABC):\n    @abstractmethod\n    def fly(self) -&gt; None:\n        pass\n\nclass Swimmable(ABC):\n    @abstractmethod\n    def swim(self) -&gt; None:\n        pass\n\nclass Bird(Flyable):\n    def fly(self) -&gt; None:\n        print(\"I'm flying!\")\n\nclass Fish(Swimmable):\n    def swim(self) -&gt; None:\n        print(\"I'm swimming!\")\n</code></pre>"},{"location":"guides/software_architecture/SOLID_principles/#key-takeaway_3","title":"\ud83c\udfaf Key Takeaway","text":"<p>Create specific interfaces rather than forcing classes to implement unnecessary methods.</p>"},{"location":"guides/software_architecture/SOLID_principles/#dependency-inversion-principle-dip","title":"Dependency Inversion Principle (DIP)","text":"<p>Definition: High-level modules should not depend on low-level modules. Both should depend on abstractions. Abstractions should not depend on details. Details should depend on abstractions.</p>"},{"location":"guides/software_architecture/SOLID_principles/#counter-example-dip-violation","title":"\u274c Counter-Example (DIP Violation)","text":"<pre><code># Low-level class\nclass EmailSender:\n    def send_email(self, message: str) -&gt; None:\n        print(f\"Sending email: {message}\")\n\n# High-level class\nclass NotificationService:\n    def __init__(self):\n        self.email_sender = EmailSender()\n\n    def notify(self, message: str) -&gt; None:\n        self.email_sender.send_email(message)\n</code></pre> <p>\ud83d\udea8 Problem: <code>NotificationService</code> is tightly coupled to <code>EmailSender</code>, making it harder to extend or change notification types.</p>"},{"location":"guides/software_architecture/SOLID_principles/#corrected-example-applying-dip","title":"\u2705 Corrected Example (Applying DIP)","text":"<pre><code>from abc import ABC, abstractmethod\n\n# Abstraction\nclass Notifier(ABC):\n    @abstractmethod\n    def notify(self, message: str) -&gt; None:\n        pass\n\n# Low-level class\nclass EmailSender(Notifier):\n    def notify(self, message: str) -&gt; None:\n        print(f\"sending email: {message}\")\n\nclass SMSNotifier(Notifier):\n    def notify(self, message: str) -&gt; None:\n        print(f\"sending SMS: {message}\")\n\n# High-level class\nclass NotificationService:\n    def __init__(self, notifier: Notifier):\n        self.notifier = notifier\n\n    def notify(self, message: str) -&gt; None:\n        self.notifier.notify(message)\n</code></pre>"},{"location":"guides/software_architecture/SOLID_principles/#key-takeaway_4","title":"\ud83c\udfaf Key Takeaway","text":"<p>DIP helps create modular, loosely coupled systems that are more adaptable and maintainable.</p>"},{"location":"guides/software_architecture/overview/","title":"Software Architecture: The (Invisible) Force Driving Business Success","text":""},{"location":"guides/software_architecture/overview/#beyond-code-why-software-architecture-should-be-a-strategic-asset","title":"\ud83c\udfd7\ufe0f Beyond Code: Why Software Architecture should be a strategic asset","text":"<p>Many Business leaders are used to focusing on acquiring new customers, staying ahead of competitors, and rolling out innovative features. However, these ambitions can quickly be derailed by issues like:</p> <ul> <li>Slow feature development due to complex, tangled codebases.  </li> <li>High maintenance costs as old systems require frequent fixes and rewrites.  </li> <li>Burned-out teams struggling to keep up with technical debt.</li> </ul> <p>Many businesses are not aware that they are operating in a cycle where software limitations restrict business growth rather than enabling it. But it doesn\u2019t have to be this way. This is where software architecture comes in. </p>"},{"location":"guides/software_architecture/overview/#the-role-of-software-architecture-in-business-success","title":"\ud83c\udfdb\ufe0f The Role of Software Architecture in Business Success","text":"<p>Software architecture is not just about writing code - it\u2019s about creating a foundation that enables businesses to scale, innovate, and adapt efficiently. A well-designed architecture should:</p> <p>Support Change \u2013 Systems should be built to evolve, not just to function today. Enable Innovation \u2013 A flexible architecture makes it easier to integrate new technologies and explore new business opportunities. Minimize Costs and Downtime \u2013 Reducing complexity in software design prevents costly rewrites and system failures. Scale Seamlessly \u2013 As customer demands and product features grow, the system should expand without breaking or requiring excessive rework.</p> <p>How Can Businesses Ensure These Principles Are Built into Their Software?</p> <p>\ud83e\udde9 Developing an adaptable, scalable, and efficient software architecture is not an accident - it\u2019s a strategic effort. The key question is: What strategies can companies adopt to ensure their software architecture supports long-term business success?</p>"},{"location":"guides/software_architecture/overview/#strategies-to-align-software-architecture-with-business-goals","title":"\ud83c\udfaf Strategies to Align Software Architecture with Business Goals","text":"<p>To ensure that software supports - not hinders - business objectives, here are three essential strategies:</p> <p>Prioritize Software Architecture as a Business Asset Software architecture shouldn\u2019t be an afterthought - it needs dedicated time and resources. Data Science, Development, and DevOps teams should be empowered to invest in architectural planning, rather than just focusing on immediate feature development.</p> <p>\ud83d\udca1</p> <p>If the company doesn\u2019t allocate time for this, good architecture won\u2019t emerge organically - it must be intentionally built.</p> <p>Foster Cross-Team Collaboration in Architectural Decisions Software architecture is not just a technical concern - it directly impacts business agility and efficiency. Involve both business and technical teams in architectural discussions to ensure the system aligns with evolving market needs. This means:</p> <p>\ud83d\udca1</p> <p>Making software design sessions inclusive - product managers, business analysts, and other stakeholders should participate, not just the tech team.</p> <p>Ensuring business needs drive architectural choices, rather than forcing business requirements to fit into rigid technical constraints.</p> <p>Adopt Iterative, Feedback-Driven Architecture Development Instead of aiming for a perfect architecture from day one, start small and refine over time. A lean, iterative approach ensures that architecture evolves based on real-world needs rather than assumptions.</p> <p>\ud83d\udca1</p> <p>\ud83d\udef9 Build a \"Minimum Viable Architecture\" \u2013 Start with a skateboard version (inspired by Agile methodologies) rather than an over-engineered solution.</p> <p>\ud83d\udde3 Engage stakeholders early \u2013 Let business teams interact with the system, provide feedback, and influence design improvements.</p> <p>\ud83d\udd27 Continuously refine \u2013 As the system scales, fine-tune the architecture rather than making drastic, disruptive overhauls.</p> <p>\u2728 A strong software architecture doesn\u2019t just serve the development team - it serves the entire business. By treating it as a strategic asset, companies can innovate faster, scale efficiently, and stay ahead of the competition.</p>"},{"location":"guides/software_architecture/overview/#the-role-and-the-competencies-of-a-software-architect","title":"\ud83d\udda5\ufe0f The role and the competencies of a Software Architect","text":"<p>A software architect is an experienced developer who continues to engage with the codebase while guiding the team - and not a disconnected strategist. The primary role of a software architect is to maximize developer productivity, ensure system scalability, and align technical decisions with business objectives - ensuring that the architecture supports evolving business needs rather than becoming a bottleneck. They facilitate technical decision-making, mentor developers, and establish best practices that keep the system flexible, maintainable, and scalable.</p> <p>\ud83d\udcd6 Robert C. Martin (\"Clean Architecture\") explains it best:  </p> <p>\u201cA software architect is a programmer and continues to be a programmer. Never fall for the lie that suggests that software architects pull back from code to focus on higher-level issues. They do not! Software architects are the best programmers and continue to take programming tasks, while they also guide the rest of the team toward a design that maximizes productivity. They do this because they cannot do their jobs properly if they are not experiencing the problems that they are creating for the rest of the programmers.\u201d  </p> <p>\u2728 In essence, great software architects lead by example - they don\u2019t just define architecture; they work within it, refine it, and ensure it empowers both developers and the business.</p>"},{"location":"guides/workflows/overview/","title":"Overview","text":""},{"location":"guides/workflows/overview/#coming-soon","title":"Coming soon... \ud83d\udee0","text":"<p>A showcase of real-world applications that reinforce these concepts through hands-on implementation.</p>"}]}